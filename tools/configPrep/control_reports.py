from datetime import date

class ControlReports:
	# create control reports as last section in queries.xml

	def __init__(self, filename, my_XML_output, language):
		self.filename = filename
		self.my_XML_output = my_XML_output
		self.lang = language
		self.buffer_group0 = []
		self.buffer_group1 = []
		self.buffer_group2 = []
		self.init_group0()
		self.init_group1()
		self.init_group2()
		self.id_t = 1

		self.t = [["###code"
	,"EN"
	,"SI"
],
["###001_table"
	,"Table"
	,"Tabela"
],
["###002_First10"
	,"First 10 records"
	,"Prvih deset zapisov"
],
["###003_OneTable"
	,"Table contents"
	,"Vsebina tabele"
],
["###004_DBreports"
	,"Database overview reports"
	,"Kontrolni izpisi iz podatkovne zbirke"
],
["###005_NumOfRecords"
	,"Number of records in each table"
	,"Število zapisov v vsaki tabeli"
],
["###006_FirstTen"
	,"First 10 records from each table"
	,"Pregledni izpis prvih 10 zapisov vsake tabele"
],
["###007_TenComment"
	,"This report enables a quick overview of the table structure"
	,"Ta izpis omogoča hiter vpogled v strukturo podatkov posamezne tabele"
],
["###008_TableReports"
	,"Display content of a selected table"
	,"Izpisi posameznih tabel"
]]


	def header(self):
		today = str(date.today())
		out = """<?xml version="1.0" encoding="utf-8"?>
<dbDIPview
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:noNamespaceSchemaLocation="dbDIPview.xsd"
           schemaMajorVersion="2">
	<database>
		<!-- NOTE: This file has been generated by an automation tool with the goal to
		enable quick start. You need to adapt the content manually! Remove excess <screen> and
		other elements. Please refer to TestAndDemo examples to see all the features that
		can be added to this file if needed. -->
		<name>TODO: Name of the viewer</name>
		<revisions>
			<revision date=\""""+ today + """\" version="0.1">Generated by dbDIPview queries generator configPrep</revision>
		</revisions>
		<ref_number>TODO: 001</ref_number>
		<screens>
"""
		self.my_XML_output.write(out)


	def tail(self):
		out = """
		</screens>
	</database>
</dbDIPview>
"""
		self.my_XML_output.write(out)


	def parse(self, tables):

		print("Adding control reports for table ")
		for table in tables:
			self.append_to_group10(table)
			self.append_to_group2(table)
			print(" " + table)

		self.end_group1()

		for s in self.buffer_group0:
			self.my_XML_output.write(self.translate(s))

		for s in self.buffer_group1:
			self.my_XML_output.write(self.translate(s))
		
		for s in self.buffer_group2:
			self.my_XML_output.write(self.translate(s))


	def append_to_group10(self, table):
		out = """
				<subselect>
					<title>""" + "###001_table " + table + """</title>
					<subtitle>###002_First10</subtitle>
					<query>SELECT * FROM """ + table + """ LIMIT 10</query>
				</subselect>"""
		self.buffer_group1.append(out)


	def append_to_group2(self, table):
		out = """
			<screen level='2'>
				<id>T""" + str(self.id_t) + """</id>
				<selectDescription>###003_OneTable """ + table + """</selectDescription>
				<title>###001_table """ +  table + """</title>
				<subtitle></subtitle>
				<query>SELECT * FROM """ + table + """</query>
			</screen>
"""
		self.buffer_group2.append(out)
		self.id_t = self.id_t + 1


	def init_group0(self):
		out = """

			<screen level='0' textOnly='1'>
				<id/>
				<selectDescription>###004_DBreports</selectDescription>
			</screen>

			<screen level='1' skipCSVsave='0'>
				<id>C1</id>
				<selectDescription>###005_NumOfRecords</selectDescription>
				<title>###005_NumOfRecords</title>
				<querymacro>NUMBER_OF_RECORDS_IN_TABLES</querymacro>
			</screen>
"""
		self.buffer_group0.append(out)


	def init_group1(self):
		out = """
			<screen level='1' skipCSVsave='1'>
				<id>ALL10</id>
				<selectDescription>###006_FirstTen</selectDescription>
				<title></title>
				<subtitle>###007_TenComment</subtitle>
				<query></query>"""
		self.buffer_group1.append(out)


	def init_group2(self):
		out = """
			<screen level='1' textOnly='1'>
				<id>ALLS</id>
				<selectDescription>###008_TableReports</selectDescription>
			</screen>
"""
		self.buffer_group2.append(out)


	def end_group1(self):
		out = """
			</screen>
"""
		self.buffer_group1.append(out)

	def translate(self, s):
		for i in range(len(self.t)):
			s = s.replace(self.t[i][0], self.t[i][self.lang])
		return s
